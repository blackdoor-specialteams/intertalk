/**
 * This class is generated by jOOQ
 */
package black.door.intertalk.jooq.tables.records;


import black.door.intertalk.jooq.tables.Users;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersRecord extends UpdatableRecordImpl<UsersRecord> implements Record3<String, byte[], byte[]> {

    private static final long serialVersionUID = 1405589089;

    /**
     * Setter for <code>public.users.handle</code>.
     */
    public void setHandle(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.users.handle</code>.
     */
    @NotNull
    public String getHandle() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.users.password</code>.
     */
    public void setPassword(byte[] value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.users.password</code>.
     */
    @NotNull
    public byte[] getPassword() {
        return (byte[]) get(1);
    }

    /**
     * Setter for <code>public.users.salt</code>.
     */
    public void setSalt(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.users.salt</code>.
     */
    @NotNull
    public byte[] getSalt() {
        return (byte[]) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, byte[], byte[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, byte[], byte[]> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Users.USERS.HANDLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field2() {
        return Users.USERS.PASSWORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field3() {
        return Users.USERS.SALT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getHandle();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value2() {
        return getPassword();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value3() {
        return getSalt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersRecord value1(String value) {
        setHandle(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersRecord value2(byte[] value) {
        setPassword(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersRecord value3(byte[] value) {
        setSalt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersRecord values(String value1, byte[] value2, byte[] value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersRecord
     */
    public UsersRecord() {
        super(Users.USERS);
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(String handle, byte[] password, byte[] salt) {
        super(Users.USERS);

        set(0, handle);
        set(1, password);
        set(2, salt);
    }
}
